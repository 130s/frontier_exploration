#ifndef BOUNDARY_LAYER_H_
#define BOUNDARY_LAYER_H_
#include <ros/ros.h>
#include <costmap_2d/layer.h>
#include <costmap_2d/layered_costmap.h>
#include <costmap_2d/GenericPluginConfig.h>
#include <dynamic_reconfigure/server.h>

#include <geometry_msgs/Polygon.h>
#include <robot_explore/UpdateBoundaryPolygon.h>

using costmap_2d::MapLocation;

namespace robot_explore
{

class BoundaryLayer : public costmap_2d::Layer, public costmap_2d::Costmap2D
{
public:
  BoundaryLayer();

  virtual void onInitialize();
  virtual void updateBounds(double origin_x, double origin_y, double origin_yaw, double* polygon_min_x, double* polygon_min_y, double* polygon_max_x,
                             double* polygon_max_y);
  virtual void updateCosts(costmap_2d::Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j);
  bool isDiscretized()
  {
    return true;
  }

  virtual void matchSize();

private:
  dynamic_reconfigure::Server<costmap_2d::GenericPluginConfig> *dsrv_;
  ros::ServiceServer polygonService_;
  geometry_msgs::Polygon polygon_;
  //double polygon_min_x, polygon_min_y, polygon_max_x, polygon_max_y;

  bool configured_;
  void reconfigureCB(costmap_2d::GenericPluginConfig &config, uint32_t level);
  void updateBoundary(costmap_2d::Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j);

  bool updateBoundaryPolygonService(robot_explore::UpdateBoundaryPolygon::Request &req, robot_explore::UpdateBoundaryPolygon::Response &res);

};

}
#endif
